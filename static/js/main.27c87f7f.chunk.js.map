{"version":3,"sources":["components/AppFooter.jsx","actions/index.js","containers/SearchBar.jsx","components/GoogleMap.jsx","components/Graph.jsx","containers/WeatherList.jsx","reducers/index.js","reducers/reducer_weather.js","index.js","components/App.jsx"],"names":["AppFooter","react_default","a","createElement","className","Container","version","href","ROOT_URL","FETCH_WEATHER","SearchBar","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","city","handleSubmit","bind","assertThisInitialized","handleInputChange","inherits","createClass","key","value","event","preventDefault","fw","fetchWeather","setState","target","Form","onSubmit","InputGroup","Input","type","placeholder","onChange","InputGroupAddon","addonType","Button","react_fontawesome_lib_default","name","tag","Component","connect","_ref","weather","url","concat","process","request","axios","get","payload","style","height","margin","padding","position","width","GoogleMap","lat","lng","google_map_react_lib_default","bootstrapURLKeys","center","zoom","Graph","colour","data","build","color","stroke","strokeDasharray","strokeOpacity","WeatherList","apply","arguments","map","w","list","_city$coord","coord","lon","temperatures","item","main","temp","avgTemperature","_","round","mean","pressures","pressure","avgPressure","humidities","humidity","avgHumidity","components_GoogleMap","src_components_Graph","Table","striped","responsive","renderWeather","rootReducer","combineReducers","length","undefined","action","compact","toConsumableArray","store","createStore","reducers","applyMiddleware","promiseMiddleware","rootElement","document","getElementById","ProviderElement","Provider","Navbar","dark","expand","fixed","NavbarBrand","src_containers_SearchBar","src_containers_WeatherList","components_AppFooter","render"],"mappings":"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","file":"static/js/main.27c87f7f.chunk.js","sourcesContent":["import React from 'react';\nimport { Container } from 'reactstrap';\n\nimport { version } from '../../package.json';\n\nconst AppFooter = () => (\n  <footer className=\"AppFooter mb-3\">\n    <Container className=\"text-right text-muted\">\n      <small>\n        v\n        { version }\n        &nbsp;|&nbsp;\n        <a href=\"https://github.com/vanillaSlice/ReactWeatherDashboard\">GitHub</a>\n        &nbsp;| Made with ðŸŽ§ by&nbsp;\n        <a href=\"https://mikelowe.xyz\">Mike</a>\n      </small>\n    </Container>\n  </footer>\n);\n\nexport default AppFooter;\n","import axios from 'axios';\n\nconst ROOT_URL = 'https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/forecast';\n\nexport const FETCH_WEATHER = 'FETCH_WEATHER';\n\nexport function fetchWeather(city) {\n  const url = `${ROOT_URL}?q=${city}&appid=${process.env.REACT_APP_OPEN_WEATHER_MAP_API_KEY}`;\n  const request = axios.get(url);\n\n  return {\n    type: FETCH_WEATHER,\n    payload: request,\n  };\n}\n","import React, { Component } from 'react';\nimport {\n  Button,\n  Form,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n} from 'reactstrap';\nimport FontAwesome from 'react-fontawesome';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { fetchWeather } from '../actions';\n\nimport './SearchBar.css';\n\nexport class SearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { city: '' };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    const { fetchWeather: fw } = this.props;\n    const { city } = this.state;\n\n    fw(city);\n\n    this.setState({ city: '' });\n  }\n\n  handleInputChange(event) {\n    this.setState({ city: event.target.value });\n  }\n\n  render() {\n    const { city } = this.state;\n\n    return (\n      <div className=\"SearchBar\">\n        <Form onSubmit={this.handleSubmit}>\n          <InputGroup>\n            <Input\n              type=\"text\"\n              placeholder=\"Enter a city to view weather data for\"\n              value={city}\n              onChange={this.handleInputChange}\n            />\n            <InputGroupAddon addonType=\"append\">\n              <Button type=\"submit\">\n                <FontAwesome name=\"plus\" tag=\"i\" />\n                <span className=\"sr-only\">Add</span>\n              </Button>\n            </InputGroupAddon>\n          </InputGroup>\n        </Form>\n      </div>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  fetchWeather: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps({ weather }) {\n  return { weather };\n}\n\nexport default connect(mapStateToProps, { fetchWeather })(SearchBar);\n","import React from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport PropTypes from 'prop-types';\n\nconst defaultZoom = 10;\nconst style = {\n  height: '7.8125rem',\n  margin: '0 auto',\n  padding: 0,\n  position: 'relative',\n  width: '7.8125rem',\n};\n\nconst GoogleMap = ({ lat, lng }) => (\n  <GoogleMapReact\n    bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY }}\n    center={{ lat, lng }}\n    style={style}\n    zoom={defaultZoom}\n  />\n);\n\nGoogleMap.propTypes = {\n  lat: PropTypes.number.isRequired,\n  lng: PropTypes.number.isRequired,\n};\n\nexport default GoogleMap;\n","import React from 'react';\nimport { Sparklines, SparklinesLine, SparklinesReferenceLine } from 'react-sparklines';\nimport PropTypes from 'prop-types';\n\nimport './Graph.css';\n\nconst Graph = (props) => {\n  const { colour, data } = props;\n  return (\n    <div className=\"Graph\">\n      <Sparklines data={data}>\n        <SparklinesLine color={colour} />\n        <SparklinesReferenceLine\n          style={{ stroke: '#f44747', strokeDasharray: '2, 2', strokeOpacity: 0.75 }}\n          type=\"mean\"\n        />\n      </Sparklines>\n    </div>\n  );\n};\n\nGraph.propTypes = {\n  colour: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default Graph;\n","import React, { Component } from 'react';\nimport { Table } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nimport GoogleMap from '../components/GoogleMap';\nimport Graph from '../components/Graph';\n\nimport './WeatherList.css';\n\nexport class WeatherList extends Component {\n  renderWeather() {\n    const { weather } = this.props;\n    return weather.map((w) => {\n      const { city, list } = w;\n      const { name } = city;\n      const { lat, lon } = city.coord;\n      const temperatures = list.map(item => item.main.temp);\n      const avgTemperature = _.round(_.mean(temperatures), 2);\n      const pressures = list.map(item => item.main.pressure);\n      const avgPressure = _.round(_.mean(pressures), 2);\n      const humidities = list.map(item => item.main.humidity);\n      const avgHumidity = _.round(_.mean(humidities), 2);\n\n      return (\n        <tr key={name}>\n          <td>\n            <GoogleMap lat={lat} lng={lon} />\n          </td>\n          <td>\n            <Graph data={temperatures} colour=\"#4ec9b0\" />\n            <span className=\"average\">\n              avg -\n              {avgTemperature}\n              &deg;F\n            </span>\n          </td>\n          <td>\n            <Graph data={pressures} colour=\"#ce8c55\" />\n            <span className=\"average\">\n              avg -\n              {avgPressure}\n              mbar\n            </span>\n          </td>\n          <td>\n            <Graph data={humidities} colour=\"#9cdcf7\" />\n            <span className=\"average\">\n              avg -\n              {avgHumidity}\n              %\n            </span>\n          </td>\n        </tr>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <Table className=\"WeatherList\" striped responsive>\n        <thead>\n          <tr>\n            <th>City</th>\n            <th>Temperature (&deg;F)</th>\n            <th>Pressure (mbar)</th>\n            <th>Humidity (%)</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.renderWeather()}\n        </tbody>\n      </Table>\n    );\n  }\n}\n\nWeatherList.propTypes = {\n  weather: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nfunction mapStateToProps({ weather }) {\n  return { weather };\n}\n\nexport default connect(mapStateToProps)(WeatherList);\n","import { combineReducers } from 'redux';\n\nimport WeatherReducer from './reducer_weather';\n\nconst rootReducer = combineReducers({\n  weather: WeatherReducer,\n});\n\nexport default rootReducer;\n","import _ from 'lodash';\n\nimport { FETCH_WEATHER } from '../actions';\n\nexport default function (state = [], action = {}) {\n  switch (action.type) {\n    case FETCH_WEATHER:\n      return _.compact([...state, action.payload.data]);\n    default:\n      return state;\n  }\n}\n","import { createElement } from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport promiseMiddleware from 'redux-promise';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(promiseMiddleware));\nconst rootElement = document.getElementById('root');\nconst ProviderElement = createElement(Provider, { store }, createElement(App));\n\nrender(ProviderElement, rootElement);\n","import React from 'react';\nimport { Container, Navbar, NavbarBrand } from 'reactstrap';\n\nimport AppFooter from './AppFooter';\nimport SearchBar from '../containers/SearchBar';\nimport WeatherList from '../containers/WeatherList';\n\nimport './App.css';\n\nexport default () => (\n  <div className=\"App\">\n    <Navbar color=\"dark\" dark expand=\"sm\" fixed=\"top\">\n      <Container>\n        <NavbarBrand href=\".\">React Weather Dashboard</NavbarBrand>\n      </Container>\n    </Navbar>\n    <Container>\n      <SearchBar />\n      <WeatherList />\n    </Container>\n    <AppFooter />\n  </div>\n);\n"],"sourceRoot":""}